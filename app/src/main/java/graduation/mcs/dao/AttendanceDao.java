package graduation.mcs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.mcs.dao.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "attendance".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "attendance";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Conference_uuid = new Property(1, String.class, "conference_uuid", false, "CONFERENCE_UUID");
        public final static Property Account_phone = new Property(2, String.class, "account_phone", false, "ACCOUNT_PHONE");
        public final static Property Account_nickname = new Property(3, String.class, "account_nickname", false, "ACCOUNT_NICKNAME");
        public final static Property Time_sign = new Property(4, Long.class, "time_sign", false, "TIME_SIGN");
        public final static Property Place_sign = new Property(5, String.class, "place_sign", false, "PLACE_SIGN");
    };


    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"attendance\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONFERENCE_UUID\" TEXT NOT NULL ," + // 1: conference_uuid
                "\"ACCOUNT_PHONE\" TEXT NOT NULL ," + // 2: account_phone
                "\"ACCOUNT_NICKNAME\" TEXT NOT NULL ," + // 3: account_nickname
                "\"TIME_SIGN\" INTEGER," + // 4: time_sign
                "\"PLACE_SIGN\" TEXT);"); // 5: place_sign
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"attendance\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getConference_uuid());
        stmt.bindString(3, entity.getAccount_phone());
        stmt.bindString(4, entity.getAccount_nickname());
 
        Long time_sign = entity.getTime_sign();
        if (time_sign != null) {
            stmt.bindLong(5, time_sign);
        }
 
        String place_sign = entity.getPlace_sign();
        if (place_sign != null) {
            stmt.bindString(6, place_sign);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // conference_uuid
            cursor.getString(offset + 2), // account_phone
            cursor.getString(offset + 3), // account_nickname
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time_sign
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // place_sign
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConference_uuid(cursor.getString(offset + 1));
        entity.setAccount_phone(cursor.getString(offset + 2));
        entity.setAccount_nickname(cursor.getString(offset + 3));
        entity.setTime_sign(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPlace_sign(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
