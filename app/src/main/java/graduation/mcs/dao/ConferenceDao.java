package graduation.mcs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.mcs.dao.Conference;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "conference".
*/
public class ConferenceDao extends AbstractDao<Conference, Long> {

    public static final String TABLENAME = "conference";

    /**
     * Properties of entity Conference.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Conference_uuid = new Property(1, String.class, "conference_uuid", false, "CONFERENCE_UUID");
        public final static Property Creator_account_phone = new Property(2, String.class, "creator_account_phone", false, "CREATOR_ACCOUNT_PHONE");
        public final static Property Time_create = new Property(3, long.class, "time_create", false, "TIME_CREATE");
        public final static Property Time_begin = new Property(4, long.class, "time_begin", false, "TIME_BEGIN");
        public final static Property Time_end = new Property(5, long.class, "time_end", false, "TIME_END");
        public final static Property Theme = new Property(6, String.class, "theme", false, "THEME");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Place = new Property(8, String.class, "place", false, "PLACE");
        public final static Property Attendance_size = new Property(9, Integer.class, "attendance_size", false, "ATTENDANCE_SIZE");
        public final static Property Open_status = new Property(10, Integer.class, "open_status", false, "OPEN_STATUS");
        public final static Property Icon_img = new Property(11, byte[].class, "icon_img", false, "ICON_IMG");
    };

    private DaoSession daoSession;


    public ConferenceDao(DaoConfig config) {
        super(config);
    }
    
    public ConferenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"conference\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONFERENCE_UUID\" TEXT NOT NULL ," + // 1: conference_uuid
                "\"CREATOR_ACCOUNT_PHONE\" TEXT NOT NULL ," + // 2: creator_account_phone
                "\"TIME_CREATE\" INTEGER NOT NULL ," + // 3: time_create
                "\"TIME_BEGIN\" INTEGER NOT NULL ," + // 4: time_begin
                "\"TIME_END\" INTEGER NOT NULL ," + // 5: time_end
                "\"THEME\" TEXT NOT NULL ," + // 6: theme
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"PLACE\" TEXT NOT NULL ," + // 8: place
                "\"ATTENDANCE_SIZE\" INTEGER," + // 9: attendance_size
                "\"OPEN_STATUS\" INTEGER," + // 10: open_status
                "\"ICON_IMG\" BLOB);"); // 11: icon_img
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"conference\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conference entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getConference_uuid());
        stmt.bindString(3, entity.getCreator_account_phone());
        stmt.bindLong(4, entity.getTime_create());
        stmt.bindLong(5, entity.getTime_begin());
        stmt.bindLong(6, entity.getTime_end());
        stmt.bindString(7, entity.getTheme());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
        stmt.bindString(9, entity.getPlace());
 
        Integer attendance_size = entity.getAttendance_size();
        if (attendance_size != null) {
            stmt.bindLong(10, attendance_size);
        }
 
        Integer open_status = entity.getOpen_status();
        if (open_status != null) {
            stmt.bindLong(11, open_status);
        }
 
        byte[] icon_img = entity.getIcon_img();
        if (icon_img != null) {
            stmt.bindBlob(12, icon_img);
        }
    }

    @Override
    protected void attachEntity(Conference entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conference readEntity(Cursor cursor, int offset) {
        Conference entity = new Conference( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // conference_uuid
            cursor.getString(offset + 2), // creator_account_phone
            cursor.getLong(offset + 3), // time_create
            cursor.getLong(offset + 4), // time_begin
            cursor.getLong(offset + 5), // time_end
            cursor.getString(offset + 6), // theme
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.getString(offset + 8), // place
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // attendance_size
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // open_status
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11) // icon_img
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conference entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConference_uuid(cursor.getString(offset + 1));
        entity.setCreator_account_phone(cursor.getString(offset + 2));
        entity.setTime_create(cursor.getLong(offset + 3));
        entity.setTime_begin(cursor.getLong(offset + 4));
        entity.setTime_end(cursor.getLong(offset + 5));
        entity.setTheme(cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlace(cursor.getString(offset + 8));
        entity.setAttendance_size(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOpen_status(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setIcon_img(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Conference entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Conference entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
