package graduation.mcs.dao;

import java.io.Serializable;
import java.util.List;
import graduation.mcs.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "conference".
 */
public class Conference implements Serializable{

    private Long id;
    /** Not-null value. */
    private String conference_uuid;
    /** Not-null value. */
    private String creator_account_phone;
    private long time_create;
    private long time_begin;
    private long time_end;
    /** Not-null value. */
    private String theme;
    private String description;
    /** Not-null value. */
    private String place;
    private Integer attendance_size;
    private Integer open_status;
    private byte[] icon_img;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ConferenceDao myDao;

    private List<Man> men;

    public Conference() {
    }

    public Conference(Long id) {
        this.id = id;
    }

    public Conference(Long id, String conference_uuid, String creator_account_phone, long time_create, long time_begin, long time_end, String theme, String description, String place, Integer attendance_size, Integer open_status, byte[] icon_img) {
        this.id = id;
        this.conference_uuid = conference_uuid;
        this.creator_account_phone = creator_account_phone;
        this.time_create = time_create;
        this.time_begin = time_begin;
        this.time_end = time_end;
        this.theme = theme;
        this.description = description;
        this.place = place;
        this.attendance_size = attendance_size;
        this.open_status = open_status;
        this.icon_img = icon_img;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getConferenceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getConference_uuid() {
        return conference_uuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setConference_uuid(String conference_uuid) {
        this.conference_uuid = conference_uuid;
    }

    /** Not-null value. */
    public String getCreator_account_phone() {
        return creator_account_phone;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreator_account_phone(String creator_account_phone) {
        this.creator_account_phone = creator_account_phone;
    }

    public long getTime_create() {
        return time_create;
    }

    public void setTime_create(long time_create) {
        this.time_create = time_create;
    }

    public long getTime_begin() {
        return time_begin;
    }

    public void setTime_begin(long time_begin) {
        this.time_begin = time_begin;
    }

    public long getTime_end() {
        return time_end;
    }

    public void setTime_end(long time_end) {
        this.time_end = time_end;
    }

    /** Not-null value. */
    public String getTheme() {
        return theme;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTheme(String theme) {
        this.theme = theme;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public String getPlace() {
        return place;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlace(String place) {
        this.place = place;
    }

    public Integer getAttendance_size() {
        return attendance_size;
    }

    public void setAttendance_size(Integer attendance_size) {
        this.attendance_size = attendance_size;
    }

    public Integer getOpen_status() {
        return open_status;
    }

    public void setOpen_status(Integer open_status) {
        this.open_status = open_status;
    }

    public byte[] getIcon_img() {
        return icon_img;
    }

    public void setIcon_img(byte[] icon_img) {
        this.icon_img = icon_img;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Man> getMen() {
        if (men == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ManDao targetDao = daoSession.getManDao();
            List<Man> menNew = targetDao._queryConference_Men(id);
            synchronized (this) {
                if(men == null) {
                    men = menNew;
                }
            }
        }
        return men;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMen() {
        men = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
