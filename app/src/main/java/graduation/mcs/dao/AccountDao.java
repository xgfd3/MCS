package graduation.mcs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import graduation.mcs.dao.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "account".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "account";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Password_plain = new Property(3, String.class, "password_plain", false, "PASSWORD_PLAIN");
        public final static Property Password_encrypted = new Property(4, String.class, "password_encrypted", false, "PASSWORD_ENCRYPTED");
        public final static Property Real_name = new Property(5, String.class, "real_name", false, "REAL_NAME");
        public final static Property Sax = new Property(6, String.class, "sax", false, "SAX");
        public final static Property Birthday = new Property(7, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Job = new Property(8, String.class, "job", false, "JOB");
        public final static Property Work_place = new Property(9, String.class, "work_place", false, "WORK_PLACE");
        public final static Property Head_img = new Property(10, byte[].class, "head_img", false, "HEAD_IMG");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"account\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NICKNAME\" TEXT NOT NULL ," + // 1: nickname
                "\"PHONE\" TEXT NOT NULL ," + // 2: phone
                "\"PASSWORD_PLAIN\" TEXT," + // 3: password_plain
                "\"PASSWORD_ENCRYPTED\" TEXT," + // 4: password_encrypted
                "\"REAL_NAME\" TEXT," + // 5: real_name
                "\"SAX\" TEXT," + // 6: sax
                "\"BIRTHDAY\" INTEGER," + // 7: birthday
                "\"JOB\" TEXT," + // 8: job
                "\"WORK_PLACE\" TEXT," + // 9: work_place
                "\"HEAD_IMG\" BLOB," + // 10: head_img
                "\"STATUS\" INTEGER);"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"account\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNickname());
        stmt.bindString(3, entity.getPhone());
 
        String password_plain = entity.getPassword_plain();
        if (password_plain != null) {
            stmt.bindString(4, password_plain);
        }
 
        String password_encrypted = entity.getPassword_encrypted();
        if (password_encrypted != null) {
            stmt.bindString(5, password_encrypted);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(6, real_name);
        }
 
        String sax = entity.getSax();
        if (sax != null) {
            stmt.bindString(7, sax);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(8, birthday);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(9, job);
        }
 
        String work_place = entity.getWork_place();
        if (work_place != null) {
            stmt.bindString(10, work_place);
        }
 
        byte[] head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindBlob(11, head_img);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nickname
            cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password_plain
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password_encrypted
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // real_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sax
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // job
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // work_place
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // head_img
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.getString(offset + 1));
        entity.setPhone(cursor.getString(offset + 2));
        entity.setPassword_plain(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword_encrypted(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReal_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSax(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setJob(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWork_place(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHead_img(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
